
def solve1(n, w, others):
    possible = []
    visited = [[False for _ in range(n)] for __ in range(2)]
    cnt = 0

    for i in range(n):
        cur = others[0][i] + others[0][(i + 1) % n]
        if cur <= w:
            bigger = max(others[0][i], others[0][(i + 1 % n)])
            possible.append((cur, (0, i), (0, (i + 1) % n), bigger))

        cur = others[1][i] + others[1][(i + 1) % n]
        if cur <= w:
            bigger = max(others[1][i], others[1][(i + 1) % n])
            possible.append((cur, (1, i), (1, (i + 1) % n), bigger))

        cur = others[0][i] + others[1][i]
        if cur <= w:
            bigger = max(others[0][i], others[1][i])
            possible.append((cur, (0, i), (1, i), bigger))

    possible.sort(key=lambda x: x[0] * 10000 + x[-1], reverse=True)
    print(possible)
    for _, a, b, __ in possible:
        if visited[a[0]][a[1]] or visited[b[0]][b[1]]:
            continue
        cnt += 1
        visited[a[0]][a[1]] = True
        visited[b[0]][b[1]] = True
        print(a, b)
    return n * 2 - cnt


LEFT = 0
UP_DOWN = 1
RIGHT = 2
LIMIT = 10001


class Position:
    def __init__(self, row, col):
        self.coverable = [False, False, False]
        self.sums = [0, 0, 0]
        self.maxs = [0, 0, 0]
        self.accessible = 0
        self.col = col
        self.row = row

    def turn_on(self, pos, sum_val, max_val):
        self.coverable[pos] = True
        self.sums[pos] = sum_val
        self.maxs[pos] = max_val
        self.accessible += 1

    def turn_off(self, pos):
        self.coverable[pos] = False
        self.accessible -= 1

    def get_right_index(self, n):
        return self.row * n + (self.col + 1) % n

    def get_sort_key(self):
        return self.accessible * LIMIT + max(self.maxs)

    def max_index(self):
        max_sum = 0
        max_index = -1
        for i, z in enumerate(zip(self.maxs, self.sums)):
            if sum(z) > max_sum:
                max_sum = sum(z)
                max_index = i
        return i

    def __repr__(self):
        print_str = "\n({}, {})번째가 갈 수 있는 곳은 {}개\n".format(self.row, self.col, self.accessible)
        print_str += str(self.coverable) + "\n"
        print_str += "L  U_D R\n"
        print_str += str(self.sums) + "\n"
        print_str += str(self.maxs) + "\n"

        return print_str


def solve(n, w, enemies):
    positions = [Position(index // n, index % n) for index in range(2 * n)]

    for i in range(n):
        # register left & right of up
        up = positions[i]
        row = up.row

        cur_sum = enemies[row][i] + enemies[row][(i + 1) % n]
        if cur_sum <= w:
            max_val = max(enemies[row][i], enemies[row][(i + 1) % n])
            positions[i].turn_on(RIGHT, cur_sum, max_val)
            positions[up.get_right_index(n)].turn_on(LEFT, cur_sum, max_val)

        # register left & right of down
        down = positions[i + n]
        row =  down.row

        cur_sum = enemies[row][i] + enemies[row][(i + 1) % n]
        if cur_sum <= w:
            max_val = max(enemies[row][i], enemies[row][(i + 1) % n])
            positions[i].turn_on(RIGHT, cur_sum, max_val)
            positions[down.get_right_index(n)].turn_on(LEFT, cur_sum, max_val)

        # register up or down
        cur_sum = enemies[0][i] + enemies[1][i]
        if cur_sum <= w:
            max_val = max(enemies[0][i], enemies[1][i])
            positions[i].turn_on(UP_DOWN, cur_sum, max_val)
            positions[i + n].turn_on(UP_DOWN, cur_sum, max_val)

    pq = sorted(positions, key=lambda x: x.get_sort_key(), reverse=True)
    index = 0
    while True:
        cur = pq[index]
        cur

    print(positions)
    return 1


def main():
    tc = int(input())
    for _t in range(tc):
        N, W = map(int, input().split())
        inputs = [list(map(int, input().split())), list(map(int, input().split()))]
        result = solve(N, W, inputs)
        print(result)


# main()


def test1():
    N, W = 6, 4
    inputs = [[1, 2, 2, 2, 3, 4], [2, 4, 4, 3, 1, 2]]
    answer = 8
    result = solve(N, W, inputs)
    print(result, result == answer)


def test():
    test1()


test()
# 1 - - 2 3 *
# - * * - - -

"""
14
6 4
1 2 2 2 3 4
2 4 4 3 1 2
3 3
1 2 2
3 3 2
3 3
1 2 1
1 2 3
3 3
1 2 1
3 1 3
3 3
3 3 3
2 1 1
3 3
3 2 3
2 3 1
3 2
2 1 1
1 2 1
3 3
2 1 1
2 3 3
3 5
3 2 2
1 4 2
4 3
1 1 3 2
2 1 2 1
4 3
1 1 3 2
2 1 2 1
3 6
2 1 3
1 2 5
1 1
1
1
1 2
1
1

"""
"""
[ output ]
8
5
4
4
5
5
4
5
3
5
5
3
2
1
"""

"""
1000 1000
206 422 721 796 78 633 490 219 295 453 810 365 639 862 707 978 905 943 635 124 605 454 693 814 390 870 579 406 663 84 202 476 608 876 882 638 432 834 306 727 136 442 806 599 985 48 877 63 946 28 289 593 331 384 874 199 613 755 898 487 77 756 577 205 574 428 395 194 684 846 200 66 872 684 757 212 174 458 424 282 619 721 650 366 66 375 124 618 361 942 845 188 29 559 632 689 959 367 217 102 182 26 119 296 957 852 931 191 437 432 893 238 133 73 675 38 459 376 480 654 755 791 491 534 610 603 189 324 980 263 34 289 311 850 110 431 351 652 55 522 501 138 857 756 255 155 357 493 963 655 160 658 738 486 28 156 301 593 841 881 473 204 211 573 300 288 327 384 77 786 93 65 83 182 363 682 605 131 746 881 875 813 488 708 413 460 382 333 571 598 175 622 847 446 689 107 779 700 866 810 985 788 553 988 889 424 764 118 245 606 167 181 452 829 162 12 405 854 998 600 432 608 142 710 150 317 94 291 286 965 281 363 866 420 483 659 885 91 755 288 12 560 307 652 890 774 450 53 737 383 388 136 356 795 757 380 27 602 513 541 877 139 633 980 447 603 78 589 517 326 257 516 114 32 746 740 465 659 590 481 640 648 456 601 143 666 210 372 526 634 65 758 99 912 624 86 100 994 954 621 807 235 456 84 745 301 8 307 941 70 582 317 190 929 455 736 920 705 331 882 852 488 372 536 544 661 642 436 254 207 881 693 626 881 97 639 394 677 666 874 645 174 723 339 639 597 384 203 102 461 379 944 1000 675 961 420 123 913 976 843 106 186 589 395 921 467 46 5 285 356 668 315 583 37 960 921 351 227 888 706 715 684 167 461 932 704 871 499 85 669 130 843 4 459 31 876 445 344 171 52 738 848 989 773 445 710 920 240 527 234 468 823 743 947 667 643 716 831 369 429 531 394 878 318 473 38 14 17 999 268 20 410 980 941 24 58 982 468 905 463 382 175 18 584 778 838 556 395 743 6 688 158 606 761 941 965 951 868 680 24 73 328 568 320 176 576 159 869 485 247 57 649 280 372 36 564 142 262 504 932 752 468 990 384 351 149 860 318 828 344 287 564 811 452 482 446 109 762 25 304 773 100 368 814 44 535 477 591 51 561 237 447 119 924 689 518 717 335 764 828 278 916 19 139 436 490 704 691 437 293 953 853 168 713 554 87 12 723 295 755 779 571 21 939 322 545 992 92 96 401 400 241 704 311 161 115 832 383 432 93 754 308 498 988 924 266 360 383 76 732 180 784 651 158 851 664 4 534 829 303 791 278 251 20 108 175 161 879 319 610 329 291 883 195 85 386 187 596 547 425 794 828 6 383 549 162 492 630 91 886 755 706 129 699 445 172 301 809 490 629 248 747 195 130 957 196 18 132 163 50 193 326 749 382 801 535 787 487 663 387 190 36 81 720 81 477 521 57 324 794 8 213 98 469 329 568 476 446 174 920 137 626 82 754 184 233 637 334 472 525 841 446 785 419 264 670 317 465 683 562 409 438 151 892 431 702 474 424 122 303 565 821 912 235 12 269 327 67 548 10 987 741 674 248 167 827 92 56 658 984 818 530 326 883 791 169 589 508 418 320 558 85 704 271 732 894 262 106 428 141 310 378 130 646 353 661 958 732 473 962 593 754 454 23 462 430 153 70 850 19 956 155 290 936 382 366 236 782 922 531 225 53 85 1 601 417 956 904 932 967 539 925 449 945 784 329 662 169 933 197 16 401 241 306 491 853 951 534 251 132 189 507 571 375 511 208 666 719 888 94 793 608 693 780 140 325 494 773 933 704 2 361 508 672 871 567 775 199 376 394 610 682 133 378 348 636 545 709 207 709 328 99 192 602 526 358 175 528 160 844 49 794 213 219 227 538 290 4 848 98 874 125 719 601 274 658 337 717 919 659 561 996 107 853 191 85 165 614 1 336 419 61 461 548 609 735 802 106 723 419 453 540 857 561 551 285 337 717 354 88 587 677 291 547 786 535 520 746 14 565 381 520 459 390 575 3 879 234 422 729 599 849 328 921 725 257 884 843 366 744 227 821 78 1000 484 851 640 50 365 522 973 589 874 204 3 826 102 123 97 537 574 746 155 225 219 735 66 247 161 780 756 479 146 222 836 741 287 983 351 957 757 955 873 242 131 272 779 755 401 137 63 240 34 285 106 91 257 802 550 786 135 645 561 641 950 912 893 488 778 908 175 165 682 611 77 854 555 932 556 299
567 238 204 961 793 490 566 639 837 340 160 95 740 994 168 574 954 823 37 28 66 880 81 591 813 567 337 429 955 135 335 544 255 102 258 165 222 885 291 188 841 354 472 194 430 452 826 158 283 160 986 824 433 502 642 553 555 461 654 821 839 542 920 607 826 722 812 732 808 871 596 993 798 272 674 726 335 155 626 315 49 19 247 712 785 833 272 273 970 360 734 484 875 929 303 91 972 766 890 296 638 209 678 799 273 678 812 824 777 685 895 982 805 461 326 167 653 749 886 583 900 116 710 634 815 89 232 529 421 643 990 922 588 748 733 285 491 952 859 706 551 255 851 209 747 545 189 631 975 988 757 106 772 785 111 684 965 405 423 235 198 334 873 750 440 244 965 565 253 372 135 275 167 865 281 451 718 28 977 945 228 447 383 223 737 573 123 122 146 725 361 582 229 631 65 999 955 828 410 720 85 9 550 273 504 470 72 134 277 327 389 525 1 114 878 509 267 287 961 263 507 420 272 695 130 199 635 451 261 636 930 472 515 636 808 194 125 115 750 323 589 830 869 949 938 203 30 54 400 678 361 100 172 824 279 822 971 950 585 157 70 82 594 119 413 463 665 594 207 892 184 866 244 819 396 143 253 171 794 860 448 348 678 910 74 423 259 889 93 743 709 333 102 793 734 150 303 305 37 340 56 755 897 371 506 455 644 750 502 921 340 161 42 920 625 838 454 806 395 472 963 881 994 628 354 930 44 235 881 821 575 528 586 850 816 305 193 824 18 335 719 845 915 269 233 609 37 662 395 708 196 496 513 666 824 972 290 564 969 483 620 2 394 539 142 864 885 969 818 595 540 413 318 55 511 573 737 331 123 279 744 718 790 884 647 869 269 281 188 170 764 705 195 363 280 258 69 876 955 520 791 695 831 106 555 915 592 147 902 697 946 839 426 938 901 966 312 739 526 126 888 561 626 522 45 494 448 324 510 167 370 785 267 778 173 912 170 684 921 85 388 120 216 405 946 143 9 202 332 495 333 810 766 464 431 8 279 973 224 25 991 524 590 8 775 339 162 58 79 133 145 826 536 141 445 319 321 536 282 774 917 65 556 166 684 103 680 557 602 545 452 934 496 560 744 403 189 834 758 592 180 728 721 340 652 904 593 961 678 281 953 979 52 722 994 243 386 679 373 103 977 704 464 980 691 64 930 265 209 308 535 888 250 491 502 145 886 111 427 818 458 593 682 262 451 498 172 910 415 474 884 719 38 464 92 427 794 757 927 960 248 7 801 870 413 356 788 203 25 236 260 613 859 529 832 718 605 767 911 994 376 87 88 586 422 572 231 239 502 750 847 283 641 478 279 766 416 361 257 490 403 76 414 158 734 259 736 573 647 582 511 555 682 465 745 165 960 532 711 843 580 39 745 210 17 725 286 61 551 628 106 734 335 194 575 401 607 143 868 565 839 840 612 910 385 867 331 927 125 575 506 991 807 906 68 476 896 919 524 229 322 28 872 568 494 11 723 969 787 477 381 803 111 859 3 520 384 358 626 306 44 145 790 950 116 837 861 670 909 215 120 998 240 434 576 450 41 911 786 205 999 539 476 72 177 760 923 267 473 201 885 500 159 101 190 844 336 144 727 324 402 546 825 804 908 690 270 976 533 477 76 648 926 485 514 646 610 755 877 579 300 97 452 655 384 393 520 135 211 588 758 874 791 831 462 210 503 87 670 103 999 339 974 21 159 805 403 63 39 326 533 4 652 442 787 705 661 140 834 351 23 788 531 135 744 519 483 66 692 105 588 931 625 954 628 333 673 386 122 887 32 745 62 631 659 902 673 148 152 522 908 824 329 269 49 177 806 360 898 289 778 157 322 899 598 884 46 734 716 993 151 484 134 569 416 253 831 112 589 340 111 556 632 232 115 858 480 648 475 581 191 777 416 797 592 906 366 170 179 521 796 674 528 880 310 395 605 762 191 275 615 461 821 789 487 175 764 122 669 44 821 722 180 382 479 290 204 916 444 487 527 286 92 277 238 813 565 118 9 409 495 764 456 893 59 614 749 400 352 839 531 437 90 451 120 665 820 229 237 105 709 479 194 592 391 809 91 407 510 955 404 967 157 415 728 630 96 729 47 115 574 798 11 973 487 961 571 535 869 78 554 714 44 941 450 706 104 939 881 138 584 474 19 30 179 784 605 520 269 29 308 451 308 704 32 690 187 678 661 155 82 381 671 22 266 238 182 228 997 583 131 824 418 299 726 564 769 711 34 382

[ output ]
1349
"""